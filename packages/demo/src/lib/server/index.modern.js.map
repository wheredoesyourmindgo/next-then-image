{"version":3,"file":"index.modern.js","sources":["../src/util.ts"],"sourcesContent":["import sharp from \"sharp\";\n\nconst getLqip = async (url: string): Promise<string> => {\n  try {\n    const imageRes = await fetch(`${url}`);\n    const blob = await imageRes.blob();\n    const mimeType = blob.type;\n    const arrayBuffer = await blob.arrayBuffer();\n    const lqipSrc = await transform(arrayBuffer, mimeType);\n    return lqipSrc;\n  } catch (e) {\n    console.log(\"Failed to fetch base64 image\", url);\n    throw e;\n  }\n};\n\nconst getLqips = async (urls: Array<string>) => {\n  const lqips = await sequenceArray<string, string | null>(\n    urls,\n    async (url) => {\n      try {\n        const b64 = await getLqip(url);\n        // return {\n        //   lqip: b64,\n        //   src: url,\n        // };\n        return b64;\n      } catch (e) {\n        return null;\n      }\n    }\n  );\n  return lqips;\n\n  // const reduced = lqips.reduce((prev, curr) => {\n  //   const {src, lqip} = curr;\n  //   return {\n  //     ...prev,\n  //     [src]: lqip,\n  //   };\n  // });\n\n  // return reduced;\n};\n\nasync function sequenceArray<T, U = T>(\n  array: T[],\n  fn: (args: T) => Promise<U>\n) {\n  const results = [];\n  for (let i = 0; i < array.length; i++) {\n    const r = await fn(array[i]);\n    results.push(r);\n  }\n  return results;\n}\n\nfunction toBase64(buffer: Buffer, mimeType: string) {\n  return `data:${mimeType};base64,${buffer.toString(\"base64\")}`;\n}\n\nasync function transform(ab: ArrayBuffer, mimeType: string) {\n  return new Promise<string>((resolve, reject) => {\n    const buffer = Buffer.from(ab);\n    sharp(buffer)\n      .normalise()\n      .modulate({\n        saturation: 1.2,\n        brightness: 1,\n      })\n      .removeAlpha()\n      .resize(30, 30, { fit: \"inside\" })\n      .jpeg()\n      .toBuffer((err, buffer) => {\n        if (err) return reject(err);\n        resolve(toBase64(buffer, mimeType));\n      });\n  });\n}\n\nexport { getLqip, getLqips };\n"],"names":["getLqip","url","imageRes","fetch","blob","mimeType","type","arrayBuffer","lqipSrc","transform","e","console","log","getLqips","urls","lqips","sequenceArray","b64","array","fn","results","i","length","r","push","toBase64","buffer","toString","ab","Promise","resolve","reject","Buffer","from","sharp","normalise","modulate","saturation","brightness","removeAlpha","resize","fit","jpeg","toBuffer","err"],"mappings":";;MAEMA,OAAO,GAAG,MAAOC,GAAP;AACd,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,IAAIF,KAAJ,CAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,UAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAtB;AACA,UAAMC,WAAW,GAAG,MAAMH,IAAI,CAACG,WAAL,EAA1B;AACA,UAAMC,OAAO,GAAG,MAAMC,SAAS,CAACF,WAAD,EAAcF,QAAd,CAA/B;AACA,WAAOG,OAAP;AACD,GAPD,CAOE,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CX,GAA5C;AACA,UAAMS,CAAN;AACD;AACF;;MAEKG,QAAQ,GAAG,MAAOC,IAAP;AACf,QAAMC,KAAK,GAAG,MAAMC,aAAa,CAC/BF,IAD+B,EAE/B,MAAOb,GAAP;AACE,QAAI;AACF,YAAMgB,GAAG,GAAG,MAAMjB,OAAO,CAACC,GAAD,CAAzB,CADE;AAGF;AACA;AACA;;AACA,aAAOgB,GAAP;AACD,KAPD,CAOE,OAAOP,CAAP,EAAU;AACV,aAAO,IAAP;AACD;AACF,GAb8B,CAAjC;AAeA,SAAOK,KAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;;AAED,eAAeC,aAAf,CACEE,KADF,EAEEC,EAFF;AAIE,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAME,CAAC,GAAG,MAAMJ,EAAE,CAACD,KAAK,CAACG,CAAD,CAAN,CAAlB;AACAD,IAAAA,OAAO,CAACI,IAAR,CAAaD,CAAb;AACD;;AACD,SAAOH,OAAP;AACD;;AAED,SAASK,QAAT,CAAkBC,MAAlB,EAAkCrB,QAAlC;AACE,iBAAeA,mBAAmBqB,MAAM,CAACC,QAAP,CAAgB,QAAhB,GAAlC;AACD;;AAED,eAAelB,SAAf,CAAyBmB,EAAzB,EAA0CvB,QAA1C;AACE,SAAO,IAAIwB,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV;AACzB,UAAML,MAAM,GAAGM,MAAM,CAACC,IAAP,CAAYL,EAAZ,CAAf;AACAM,IAAAA,KAAK,CAACR,MAAD,CAAL,CACGS,SADH,GAEGC,QAFH,CAEY;AACRC,MAAAA,UAAU,EAAE,GADJ;AAERC,MAAAA,UAAU,EAAE;AAFJ,KAFZ,EAMGC,WANH,GAOGC,MAPH,CAOU,EAPV,EAOc,EAPd,EAOkB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAPlB,EAQGC,IARH,GASGC,QATH,CASY,CAACC,GAAD,EAAMlB,MAAN;AACR,UAAIkB,GAAJ,EAAS,OAAOb,MAAM,CAACa,GAAD,CAAb;AACTd,MAAAA,OAAO,CAACL,QAAQ,CAACC,MAAD,EAASrB,QAAT,CAAT,CAAP;AACD,KAZH;AAaD,GAfM,CAAP;AAgBD;;;;"}