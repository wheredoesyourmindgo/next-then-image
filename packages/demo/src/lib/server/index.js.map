{"version":3,"file":"index.js","sources":["../src/util.ts"],"sourcesContent":["import sharp from \"sharp\";\n\nconst getLqip = async (url: string): Promise<string> => {\n  try {\n    const imageRes = await fetch(`${url}`);\n    const blob = await imageRes.blob();\n    const mimeType = blob.type;\n    const arrayBuffer = await blob.arrayBuffer();\n    const lqipSrc = await transform(arrayBuffer, mimeType);\n    return lqipSrc;\n  } catch (e) {\n    console.log(\"Failed to fetch base64 image\", url);\n    throw e;\n  }\n};\n\nconst getLqips = async (urls: Array<string>) => {\n  const lqips = await sequenceArray<string, string | null>(\n    urls,\n    async (url) => {\n      try {\n        const b64 = await getLqip(url);\n        // return {\n        //   lqip: b64,\n        //   src: url,\n        // };\n        return b64;\n      } catch (e) {\n        return null;\n      }\n    }\n  );\n  return lqips;\n\n  // const reduced = lqips.reduce((prev, curr) => {\n  //   const {src, lqip} = curr;\n  //   return {\n  //     ...prev,\n  //     [src]: lqip,\n  //   };\n  // });\n\n  // return reduced;\n};\n\nasync function sequenceArray<T, U = T>(\n  array: T[],\n  fn: (args: T) => Promise<U>\n) {\n  const results = [];\n  for (let i = 0; i < array.length; i++) {\n    const r = await fn(array[i]);\n    results.push(r);\n  }\n  return results;\n}\n\nfunction toBase64(buffer: Buffer, mimeType: string) {\n  return `data:${mimeType};base64,${buffer.toString(\"base64\")}`;\n}\n\nasync function transform(ab: ArrayBuffer, mimeType: string) {\n  return new Promise<string>((resolve, reject) => {\n    const buffer = Buffer.from(ab);\n    sharp(buffer)\n      .normalise()\n      .modulate({\n        saturation: 1.2,\n        brightness: 1,\n      })\n      .removeAlpha()\n      .resize(30, 30, { fit: \"inside\" })\n      .jpeg()\n      .toBuffer((err, buffer) => {\n        if (err) return reject(err);\n        resolve(toBase64(buffer, mimeType));\n      });\n  });\n}\n\nexport { getLqip, getLqips };\n"],"names":["state","value","_settle","transform","ab","mimeType","Promise","resolve","reject","buffer","Buffer","from","sharp","normalise","modulate","saturation","brightness","removeAlpha","resize","fit","jpeg","toBuffer","err","toBase64","onRejected","result","thenable","sequenceArray","array","fn","results","i","r","push","getLqip","url","fetch","imageRes","blob","type","arrayBuffer","e","console","log","getLqips","urls","toString"],"mappings":";;;;;;;;;;;;;;;;;;;WAiDQ;gCACoB;;YAExBA,QAAQ;AACTA,UAAAA,eAAA;;;;;AAKDC,QAAAA,OAAA,gBAAuB,kBAAvB;;;;;sBAKc;WACZ,MAAMC,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;;;;;;;;;;IAHKC,qBAAAA,UAAUC,IAAiBC;;AACxC,2BAAO,IAAIC,OAAJ,CAAoB,UAACC,OAAD,EAAUC,MAAV;AACzB,UAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYP,EAAZ,CAAf;AACAQ,MAAAA,KAAK,CAACH,MAAD,CAAL,CACGI,SADH,GAEGC,QAFH,CAEY;AACRC,QAAAA,UAAU,EAAE,GADJ;AAERC,QAAAA,UAAU,EAAE;AAFJ,OAFZ,EAMGC,WANH,GAOGC,MAPH,CAOU,EAPV,EAOc,EAPd,EAOkB;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAPlB,EAQGC,IARH,GASGC,QATH,CASY,UAACC,GAAD,EAAMb,MAAN;AACR,YAAIa,GAAJ,EAAS,OAAOd,MAAM,CAACc,GAAD,CAAb;AACTf,QAAAA,OAAO,CAACgB,QAAQ,CAACd,MAAD,EAASJ,QAAT,CAAT,CAAP;AACD,OAZH;AAaD,KAfM,CAAP;AAgBD;;;;;IA5EY;;;gDAE6BmB;QACtCC,MAAM;QACNzB;;;;;;;;oBAKQ;;AAET;;;;AAID,mBAAA;;;;;;;;;;;;;;AAaG;AAEH;AAEA,sBAAA,GAAA,GAAA;AACA;;;;;;;;;;SAyCI0B,yBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA/BSC,yBAAAA,cACbC,OACAC;;AAEA,QAAMC,OAAO,GAAG,EAAhB;;wBACoBF,iBAAXG,GAA8B;AAAA,6BACrBF,EAAE,CAACD,KAAK,CAACG,CAAD,CAAN,CADmB,iBAC/BC,CAD+B;AAErCF,QAAAA,OAAO,CAACG,IAAR,CAAaD,CAAb;AAFqC;AAGtC;;;AACD,aAAOF,OAAP;SAAOA;AACR;;;;;IArDKI,OAAO,YAAPA,OAAO,CAAUC,GAAV;AAAA;8CACP;AAAA,6BACqBC,KAAK,MAAID,GAAJ,CAD1B,iBACIE,QADJ;AAAA,+BAEiBA,QAAQ,CAACC,IAAT,EAFjB,iBAEIA,IAFJ;AAGF,cAAMjC,QAAQ,GAAGiC,IAAI,CAACC,IAAtB;AAHE,iCAIwBD,IAAI,CAACE,WAAL,EAJxB,iBAIIA,WAJJ;AAAA,mCAKoBrC,SAAS,CAACqC,WAAD,EAAcnC,QAAd,CAL7B;AAAA;AAAA;AAAA;AAOH,iBAAQoC,GAAG;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CR,GAA5C;AACA,YAAMM,CAAN;AACD;AACF,GAZY;AAAA;AAAA;AAAA;;IAcPG,QAAQ,YAARA,QAAQ,CAAUC,IAAV;yBACQlB,aAAa,CAC/BkB,IAD+B,YAExBV,GAFwB;8CAGzB;AAAA,6BACgBD,OAAO,CAACC,GAAD,CADvB;AAGF;AACA;AACA;AAED,mBAAW;AACV,aAAO,IAAP;AACD;AACF,GAb8B;AAkBjC;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;;AAcD,SAASZ,QAAT,CAAkBd,MAAlB,EAAkCJ,QAAlC;AACE,mBAAeA,QAAf,gBAAkCI,MAAM,CAACqC,QAAP,CAAgB,QAAhB,CAAlC;AACD;;;;;"}